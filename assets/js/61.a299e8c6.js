(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{471:function(t,a,s){"use strict";s.r(a);var r=s(15),h=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"安全性设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安全性设计"}},[t._v("#")]),t._v(" 安全性设计")]),t._v(" "),a("h3",{attrs:{id:"背景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[t._v("#")]),t._v(" 背景")]),t._v(" "),a("p",[t._v("大家在选择服务器时，通常会关注它的性能、稳定性以及资源开销。然而，服务器的「"),a("strong",[t._v("安全性")]),t._v("」也是尤为重要的，相信没有人希望看到自己的系统被黑客光顾。\n各大厂商通常也会在服务器的安全性建设上投入巨大资源，smart-http 对此也是非常重视。")]),t._v(" "),a("h3",{attrs:{id:"设计思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计思路"}},[t._v("#")]),t._v(" 设计思路")]),t._v(" "),a("p",[t._v("相信很多人都听过一句名言：「最坚固的堡垒都是从内部攻破的」。\n我们最不希望看到的一幕，是因为 smart-http 在迭代的过程中，由于引入某个 bug 导致安全体系遭受冲击。\n这种情况对于我们自己以及使用 smart-http 的客户，都是不可容忍的。\n为此，我们选择使用单元测试的形式，通过持续性沉淀各种正常或异常的场景，从内部加固 smart-http 的安全性。")]),t._v(" "),a("p",[t._v("另一方面，我们还会引入外部测试工具，对 smart-http 服务进行暴力攻击。通过权威可信任的第三方，输出 smart-http 的安全检查报告。")]),t._v(" "),a("h4",{attrs:{id:"关于开源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于开源"}},[t._v("#")]),t._v(" 关于开源")]),t._v(" "),a("p",[t._v("我们会毫不避讳的开源全部 smart-http 以及单测的代码。\n在早期如若出现漏洞或许会让某些不怀好意的人得以利用，但我们更愿意相信社区的力量能够帮助我们及时发现并堵住安全缺口。\n总之，无论今后会面临何种局面，smart-http 的核心代码 100% 开源。")]),t._v(" "),a("p",[a("strong",[t._v("最后")]),a("br"),t._v('\n我们非常欢迎且诚挚的邀请每一位支持开源的朋友来"攻击" smart-http，并贡献相应的应对策略。\n开源，能够让 smart-http 越来越安全，也让用户越来越放心的选择 smart-http。')])])}),[],!1,null,null,null);a.default=h.exports}}]);