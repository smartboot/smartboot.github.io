(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{358:function(t,r,s){"use strict";s.r(r);var a=s(359),n=s.n(a);for(var o in a)["default"].indexOf(o)<0&&function(t){s.d(r,t,(function(){return a[t]}))}(o);r.default=n.a},359:function(t,r){"undefined"!=typeof checkStar&&checkStar("smartboot","smart-socket")},445:function(t,r,s){t.exports=s.p+"assets/img/proxy_protocol_v2_ipv4.7a8ab5fd.png"},446:function(t,r,s){t.exports=s.p+"assets/img/proxy_protocol_v2_ipv6.383ab4ef.png"},453:function(t,r,s){"use strict";s.d(r,"a",(function(){return a})),s.d(r,"b",(function(){return n}));var a=function(){var t=this,r=t._self._c;t._self._setupProxy;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"背景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[t._v("#")]),t._v(" 背景")]),t._v(" "),r("p",[t._v("随着互联网应用的发展，负载均衡技术得到了广泛应用。\n在早期的网络架构中，当客户端直接连接后端服务器时，后端服务器可以直接获取客户端的真实 IP 地址等连接信息。\n然而，当引入负载均衡器（如 HAProxy、Nginx 等）来分发流量，以提高应用的可用性、可扩展性和性能后，问题就出现了。")]),t._v(" "),r("p",[t._v("负载均衡器位于客户端和后端服务器之间，它会接收客户端的请求，然后将请求转发到后端服务器。\n在这个过程中，后端服务器看到的请求源 IP 地址是负载均衡器的 IP 地址，而不是客户端的真实 IP 地址。\n这就导致后端服务器在进行一些基于客户端 IP 的操作（如访问控制、日志记录等）时出现不准确的情况。")]),t._v(" "),r("p",[r("strong",[t._v("场景需求")])]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("访问控制与安全策略")]),t._v("：许多服务器应用需要基于客户端的真实 IP 地址来实施访问控制。例如，一个 Web 应用可能希望只允许来自特定 IP 网段的客户端访问，或者对频繁请求的客户端 IP 进行限制。如果后端服务器获取的是负载均衡器的 IP，这些安全策略将无法正确实施。")]),t._v(" "),r("li",[r("strong",[t._v("准确的日志记录")]),t._v("：对于服务器的日志系统来说，记录客户端的真实 IP 地址对于分析用户行为、排查安全问题等非常重要。如果记录的是负载均衡器的 IP，就无法准确追踪客户端的来源和行为模式。")]),t._v(" "),r("li",[r("strong",[t._v("基于 IP 的应用功能")]),t._v("：一些应用可能会根据客户端的 IP 地址提供个性化的服务，如地理定位相关的内容推送等。没有客户端真实 IP，这些功能将受到影响。")])]),t._v(" "),r("h2",{attrs:{id:"proxy-protocol-简介"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#proxy-protocol-简介"}},[t._v("#")]),t._v(" Proxy Protocol 简介")]),t._v(" "),r("p",[t._v("为了解决上述问题，Proxy Protocol 应运而生。它是一种在负载均衡器和后端服务器之间传递客户端连接信息（如客户端 IP 地址、端口等）的协议。通过在负载均衡器和后端服务器之间建立一种标准的信息传递机制，使得后端服务器能够获取客户端的真实连接信息，就好像客户端是直接连接到后端服务器一样。")]),t._v(" "),r("p",[t._v("这样，后端服务器可以继续基于准确的客户端 IP 进行访问控制、日志记录等操作，而不会因为负载均衡器的存在而丢失这些重要信息。Proxy Protocol 的出现有效地填补了负载均衡场景下客户端连接信息传递的空白，使得网络架构在引入负载均衡器的情况下依然能够保持后端服务器对客户端信息的准确获取和处理能力。")]),t._v(" "),r("h3",{attrs:{id:"协议差异"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#协议差异"}},[t._v("#")]),t._v(" 协议差异")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("协议")]),t._v(" "),r("th",[t._v("PROXY Protocol v1")]),t._v(" "),r("th",[t._v("PROXY Protocol v2")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("格式")]),t._v(" "),r("td",[t._v("ASCII文本格式。")]),t._v(" "),r("td",[t._v("二进制格式。")])]),t._v(" "),r("tr",[r("td",[t._v("支持协议")]),t._v(" "),r("td",[t._v("TCP")]),t._v(" "),r("td",[t._v("TCP、UDP")])]),t._v(" "),r("tr",[r("td",[t._v("安全性")]),t._v(" "),r("td",[t._v("无加密或认证机制，数据容易被篡改，安全性相对较低。")]),t._v(" "),r("td",[t._v("引入了TLS握手信息，安全性较高")])]),t._v(" "),r("tr",[r("td",[t._v("兼容性")]),t._v(" "),r("td",[t._v("固定格式，扩展性有限，灵活性较低。")]),t._v(" "),r("td",[t._v("可变长度，支持多种扩展信息，灵活性较高。")])]),t._v(" "),r("tr",[r("td",[t._v("场景")]),t._v(" "),r("td",[t._v("只需要简单的 TCP 代理并且对安全性要求不高，可以选择 "),r("strong",[t._v("Proxy Protocol V1")]),t._v("。")]),t._v(" "),r("td",[t._v("需要更高的安全性，建议使用 "),r("strong",[t._v("Proxy Protocol V2")]),t._v("。")])])])]),t._v(" "),r("h3",{attrs:{id:"v1协议示例"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#v1协议示例"}},[t._v("#")]),t._v(" V1协议示例")]),t._v(" "),r("div",{staticClass:"language-text line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("PROXY TCP4 192.168.0.1 192.168.0.11 56324 443\\r\\n\nGET / HTTP/1.1\\r\\n\nHost: 192.168.0.11\\r\\n\n\\r\\n\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br")])]),r("h3",{attrs:{id:"v2解析格式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#v2解析格式"}},[t._v("#")]),t._v(" V2解析格式")]),t._v(" "),r("ul",[r("li",[t._v("IPv4地址的PROXY 协议二进制标头格式：\n"),r("img",{attrs:{src:s(445),alt:""}})]),t._v(" "),r("li",[t._v("IPv6地址的PROXY 协议二进制标头格式：\n"),r("img",{attrs:{src:s(446),alt:""}})])]),t._v(" "),r("h2",{attrs:{id:"proxyprotocolplugin的使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#proxyprotocolplugin的使用"}},[t._v("#")]),t._v(" ProxyProtocolPlugin的使用")]),t._v(" "),r("p",[t._v("smart-socket 提供的 ProxyProtocolPlugin 插件，同时支持 Proxy Protocol V1 和 V2 规范。")]),t._v(" "),r("p",[r("strong",[t._v("示例")])]),t._v(" "),r("div",{staticClass:"language-java line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-java"}},[r("code",[t._v("processor"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("addPlugin")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ProxyProtocolPlugin")]),r("span",{pre:!0,attrs:{class:"token generics"}},[r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br")])])])},n=[]},457:function(t,r,s){"use strict";s.r(r);var a=s(453),n=s(358);for(var o in n)["default"].indexOf(o)<0&&function(t){s.d(r,t,(function(){return n[t]}))}(o);var v=s(15),e=Object(v.a)(n.default,a.a,a.b,!1,null,null,null);r.default=e.exports}}]);